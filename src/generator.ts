import { loadConfig } from '@/config';
import fs from 'node:fs';
import path from 'node:path';
import fg from 'fast-glob';

export async function generateRoutes() {
  const config = loadConfig();
  const files = await fg(['**/page.tsx'], {
    cwd: config.root,
    onlyFiles: true,
  });

  const routes = files
    .map(f => '/' + f.replace(/\\/g, '/'))
    .map(f => f.replace(/\/page\.tsx$/, ''))
    .map(f => f.replace(/\/index$/, ''))
    .map(f => (f === '' ? '/' : f));

  const uniqueRoutes = Array.from(new Set(routes));
  const lines = uniqueRoutes.map(route => `  "${route}",`);
  const content = `export const routes = [\n${lines.join('\n')}\n] as const;\n`;

  const outputPath = path.resolve(config.typesOutput);
  const dir = path.dirname(outputPath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  fs.writeFileSync(outputPath, content);
  console.log(`✅ Generated types in: ${outputPath}`);
  return outputPath;
}

export async function generateHook() {
  const config = loadConfig();
  const hookPath = path.resolve(config.hookOutput || 'src/hooks/useRouter.ts');
  const content = `
// THIS FILE IS AUTOMATICALLY GENERATED BY THE routegen-next CLI — DO NOT EDIT MANUALLY

import { useRouter as useRouterBase } from 'next/navigation';
import { routes } from './routes';

type Route = typeof routes[number];

export function useRouter() {
  const router = useRouterBase();
  return {
    ...router,
    push: (to: Route) => router.push(to),
    replace: (to: Route) => router.replace(to),
  };
}
`.trimStart();
  fs.writeFileSync(hookPath, content);
  console.log(`✅ Typed hook generated on: ${hookPath}`);
}

export async function generateLink() {
  const config = loadConfig();
  const { linkOutput } = config;
  const content = `
// THIS FILE IS AUTOMATICALLY GENERATED BY THE routegen-next CLI — DO NOT EDIT MANUALLY

import NextLink, { type LinkProps as NextLinkProps } from 'next/link';
import { type ComponentProps } from 'react';
import { routes } from './routes';
import {LiteralUnion} from 'routegen-next'

type Route = LiteralUnion<typeof routes[number], string>;

export type Props = Omit<NextLinkProps, 'href'> &
  Omit<ComponentProps<'a'>, 'ref'> & {
    href: Route;
  };

export const Link = ({ href, ...rest }: Props) => {
  return <NextLink href={href} {...rest} />;
};
`.trimStart();
  fs.writeFileSync(linkOutput, content);
  console.log(`✅ Typed Link component generated on: ${linkOutput}`);
}
